{"version":3,"file":"static/js/15.b6a6b58a.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/contacts-list.module.scss?6956","webpack://goit-react-hw-08-phonebook/./src/components/ContactsItem/contacts-item.module.scss?3b57","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/phonebook.module.scss?fb6b","components/Phonebook/Phonebook.jsx","components/Filter/Filter.jsx","redux/filter/filter-selectors.js","redux/contacts/contacts-selectors.js","components/Contacts/Contacts.jsx","pages/ContactsPage/ContactsPage.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"contacts-list_wrapper__L6KBE\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"contacts-item_button__Q+W6q\",\"item\":\"contacts-item_item__ugB0v\"};","import PropTypes from 'prop-types';\nimport scss from './contacts-item.module.scss';\n\nconst ContactsItem = ({ id, name, number, removeContact }) => {\n  return (\n    <li /*className={scss.item}*/>\n      {name}. Number : {number}\n      <button\n        className={scss.button}\n        onClick={() => removeContact(id)}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactsItem;\n\nContactsItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  removeContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport scss from './contacts-list.module.scss';\nimport ContactsItem from '../ContactsItem';\n\nconst ContactsList = ({ contacts, removeContact }) => {\n  const myContacts = contacts.map(({ id, name, number }) => {\n    return (\n      <ContactsItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        removeContact={removeContact}\n      />\n    );\n  });\n  return <ol className={scss.wrapper}>{myContacts}</ol>;\n};\n\nexport default ContactsList;\n\nContactsList.defaultProps = {\n  contacts: [],\n};\n\nContactsList.propType = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"phonebook_wrapper__dwyH0\",\"button\":\"phonebook_button__hySPi\",\"input\":\"phonebook_input__OEA8Y\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import { useSelector } from 'react-redux';\n\nimport scss from './phonebook.module.scss';\n// import store from 'redux/store';\n\nconst inititalState = { name: '', number: '' };\n\nconst Phonebook = ({ onSubmit }) => {\n  const [state, setState] = useState({ ...inititalState });\n  // const phoneContacts = useSelector(store => store.contacts);\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...inititalState });\n  };\n\n  const { name, number } = state;\n\n  return (\n    <div className={scss.wrapper}>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Name\n          <input\n            className={scss.input}\n            onChange={handleChange}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            className={scss.input}\n            onChange={handleChange}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={scss.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Phonebook;\n\nPhonebook.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n// import scss from './filter.module.scss';\n\nconst Filter = ({ handleChange, value }) => {\n  return (\n    <div>\n      <label>Filter contacts</label>\n      <input\n        name=\"filter\"\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Filter contacts\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n","export const getFilter = ({ filter }) => filter;\n","export const getAllContacts = ({ contacts }) => contacts.items;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name }) => {\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n\n  return result;\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ContactsList from 'components/ContactsList';\nimport Phonebook from 'components/Phonebook';\nimport Filter from 'components/Filter';\n\nimport {\n  fetchAddContact,\n  fetchDeleteContact,\n  fetchAllContacts,\n} from '../../redux/contacts/contacts-operations';\n\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport { getFilter } from '../../redux/filter/filter-selectors';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\n\nconst Contacts = () => {\n  const filteredContacts = useSelector(getFilteredContacts);\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const handleAddContact = ({ name, number }) => {\n    dispatch(fetchAddContact({ name, number }));\n  };\n\n  const handleDeleteContact = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  const handleFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  const isContacts = Boolean(filteredContacts.length);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Phonebook onSubmit={handleAddContact} />\n      <h3>Contacts</h3>\n      <Filter value={filter} handleChange={handleFilter} />\n      {isContacts ? (\n        <ContactsList\n          contacts={filteredContacts}\n          removeContact={handleDeleteContact}\n        />\n      ) : (\n        <p>No contacts in phonebook</p>\n      )}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import Contacts from 'components/Contacts';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <Contacts />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["id","name","number","removeContact","className","scss","onClick","type","ContactsList","contacts","myContacts","map","defaultProps","propType","PropTypes","isRequired","inititalState","onSubmit","useState","state","setState","handleChange","target","value","prevState","e","preventDefault","onChange","pattern","title","required","placeholder","getFilter","filter","getFilteredContacts","items","normalizedFilter","toLowerCase","includes","filteredContacts","useSelector","dispatch","useDispatch","useEffect","fetchAllContacts","isContacts","Boolean","length","fetchAddContact","setFilter","fetchDeleteContact","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}